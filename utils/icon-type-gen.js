const fs = require('fs');

const outputDir = './src/components/Icon';

const localIcons = {
  fileExt: '.svg',
  inputDir: './assets/icons',
  importDir: '@assets/icons',
  outputName: 'localIcons',
};

const plIcons = {
  fileExt: '.svg.js',
  inputDir: './node_modules/@axa-ch/materials/icons',
  importDir: '@axa-ch/materials/icons',
  outputName: 'plIcons',
  outputDts: './src/@types/@axa-ch__materials/index.d.ts',
};

const plImages = {
  fileExt: '.svg.js',
  inputDir: './node_modules/@axa-ch/materials/images',
  importDir: '@axa-ch/materials/images',
  outputName: 'plImages',
  outputDts: './src/@types/@axa-ch__materials/index.d.ts',
  outputDtsAppend: true,
};

const fileHeader = `// DO NOT MODIFY THIS FILE !!
// THIS FILE IS GENERATED BY './utils/icon-type-gen.js' DURING 'npm run icons:type-gen'

`;

/**
 * Transforms fileName (without ext) into a JS-safe variable name
 *
 * Appends '_svg', so that the name does't clash with JS reserved words (like "delete")
 *
 * https://www.w3schools.com/js/js_reserved.asp
 */
const importVariableName = (fileName) => {
  return fileName.replace(/-/g, '_') + '_svg';
};

/**
 * Generates `${outputDir}/${outputName}.ts`
 *
 * @return string[] file names without ext
 */
const generateIconsFile = (options) => {

  const {fileExt, inputDir, importDir, outputName, outputDts, outputDtsAppend} = options;

  const svgRegExp = new RegExp(fileExt.replace(/\./g, '\\.') + '$');

  let fileNames = [];
  let outputData = '';

  // read input folder using file system and loop in all files
  const files = fs.readdirSync(inputDir);
  files.forEach(file => {
    // take only svg files
    if (svgRegExp.test(file)) {
      // save filename without ext.
      const fileName = file.split(fileExt)[0];
      fileNames.push(fileName);
    }
  });

  fileNames.sort(); // for sorted object keys

  // if writing reexport file
  if (outputName) {

    const importVariables = fileNames.map(importVariableName);

    // preprocess output data (comments, formatting, data, ..)
    outputData = fileHeader;
    outputData = `${outputData}// tslint:disable:ordered-imports\n`; // because sorted by `fileNames` which differ from `importVariables`
    outputData = `${outputData}\n`;
    importVariables.forEach((importVariable, index) => {
      outputData = `${outputData}import ${importVariable} from '${importDir}/${fileNames[index]}${fileExt}';\n`;
    });

    outputData = `${outputData}\n`;
    outputData = `${outputData}export const ${outputName} = {\n`;

    fileNames.forEach((filename, index) => {
      const jsKeyFileName = ~filename.indexOf('-') ? `'${filename}'` : filename;
      if (jsKeyFileName === importVariables[index]) {
        outputData = `${outputData}  ${jsKeyFileName},\n`;
      } else {
        outputData = `${outputData}  ${jsKeyFileName}: ${importVariables[index]},\n`;
      }
    });

    outputData = `${outputData}};\n`;

    const outputFile = `${outputDir}/${outputName}.ts`;

    // write into file
    fs.writeFileSync(outputFile, outputData);

    // inform about success!
    console.log(`saved (${fileNames.length} icons) => ${outputFile}`);

  }


  //generate pl icons .d.ts
  if (outputDts) {

    if (outputDtsAppend) {
      outputData = fs.readFileSync(outputDts).toString();
    } else {
      outputData = fileHeader;
    }

    fileNames.forEach(fileName => {
      outputData = `${outputData}declare module '${importDir}/${fileName}${fileExt}' {
  const svgString = '';
  export default svgString;
}
`;
    });

    // write into file
    fs.writeFileSync(outputDts, outputData);

    // inform about success!
    console.log(`saved (${fileNames.length} modules) => ${outputDts}`);
  }

  return fileNames;
};

const intersect = (as, bs) => as.filter(a => bs.includes(a));

const findDuplicateIcons = (localFileNames, plFileNames, plFileNamesImages) => {
  // check for duplicate icons
  const intersection = [...intersect(localFileNames, plFileNames), ...intersect(localFileNames, plFileNamesImages)];

  if (intersection.length > 0) {
    console.warn(`===== Duplicate icon warning =====\n${intersection.sort().toString()}\n\nYou should rename or delete them from local folder.\n`);
  }
};

// execute
const localFileNames = generateIconsFile(localIcons);
const plFileNamesIcons = generateIconsFile(plIcons);
const plFileNamesImages = generateIconsFile(plImages);
findDuplicateIcons(localFileNames, plFileNamesIcons, plFileNamesImages);

// currently our localIcons and pl-images overlap. Will decide in future when/whether to cleanup our localIcons.
// findDuplicateIcons(localFileNames, plFileNamesImages);
